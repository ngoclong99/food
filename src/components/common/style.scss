@import '/src/style/mixins.scss';

// skeleton
@keyframes skeleton-loading {
  0% {
    transform: translate(-37.5%);
  }
  to {
    transform: translate(37.5%);
  }
}
.skeleton {
  position: relative;
  z-index: 0;
  overflow: hidden;
  background: 0 0;
  &::after {
    position: absolute;
    inset: 0 -150%;
    background: linear-gradient(
      90deg,
      rgba(190, 190, 190, 0.2) 25%,
      rgba(129, 129, 129, 0.24) 37%,
      rgba(190, 190, 190, 0.2) 63%
    );
    animation: skeleton-loading 1.2s ease infinite;
    content: '';
  }
}

.skeletons {
  & > .skeleton.text {
    height: pxToRem(16px);
    line-height: pxToRem(16px);
    border-radius: pxToRem(5px);
    margin-top: pxToRem(10px);
    // & + .skeleton.text {
    // }
  }
}
.skeleton.img {
  line-height: pxToRem(16px);
  border-radius: pxToRem(5px);
  width: inherit;
  height: inherit;
  padding: 0 pxToRem(20px);
  & > img {
    opacity: 0.2;
    width: 100%;
    height: 100%;
  }
}

// setting
.text.orange_setting {
  color: $orange;
}
.text.blue_setting {
  color: $blue;
}
.text.green_setting {
  color: $green;
}
.text.yellow_setting {
  color: $yellow;
}
.bg.orange_setting {
  background-color: $orange;
  border-color: $orange;
  &::after {
    background-color: $orange;
  }
}
.bg.blue_setting {
  background-color: $blue;
  border-color: $blue;
  &::after {
    background-color: $blue;
  }
}
.bg.green_setting {
  background-color: $green;
  border-color: $green;
  &::after {
    background-color: $green;
  }
}
.bg.yellow_setting {
  background-color: $yellow;
  border-color: $yellow;
  &::after {
    background-color: $yellow;
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
.setting {
  position: fixed;
  right: 0;
  top: pxToRem(150px);
  transition: 0.5s all ease;
  z-index: 10;
  &.active {
    transform: translateX(100%);
  }
  &__theme {
    position: relative;
    background-color: rgba(50, 50, 50, 0.95);
    box-shadow: 0px pxToRem(1px) pxToRem(4px) rgb(0 0 0 / 45%);
    transition: all 0.5s;
    height: auto;
    padding: pxToRem(15px) pxToRem(25px);
    &-text {
      color: $white;
      text-transform: capitalize;
    }
    &-selects {
      display: flex;
      padding: pxToRem(15px) 0;
      gap: 0 pxToRem(7px);
      &--box {
        height: pxToRem(35px);
        width: pxToRem(24px);
        cursor: pointer;
        border: 1px solid $white;
      }
    }
    &-spin {
      position: absolute;
      padding: pxToRem(10px);
      left: -50px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      &:hover {
        opacity: 0.9;
      }
      & img {
        width: pxToRem(30px);
        height: pxToRem(30px);
        animation: spin 2s infinite linear;
      }
    }
  }
}

// ButtonEffect
.button-effect {
  color: white;
  padding: pxToRem(10.5px) pxToRem(30px);
  text-transform: uppercase;
  border: pxToRem(3px) solid;
  max-width: max-content;
  margin: 0 auto;
  cursor: pointer;
  transition: all 0.3s;
  position: relative;
  &::after {
    content: '';
    position: absolute;
    width: 0%;
    height: pxToRem(3px);
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    transition: all 0.3s;
  }
  &:hover {
    background-color: transparent;
    &::after {
      width: 100%;
    }
  }
}
@keyframes button-scroll {
  from {
    top: pxToRem(20px);
    opacity: 1;
  }
  to {
    top: 40%;
    opacity: 0;
  }
}

// ButtonScroll
.button-scroll {
  width: pxToRem(60px);
  height: pxToRem(120px);
  margin: pxToRem(50px) auto 0px;
  background: transparent;
  border: pxToRem(2px) solid white;
  border-radius: pxToRem(60px);
  position: relative;
  cursor: pointer;
  display: none;
  &::before {
    content: '';
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    border: pxToRem(2px) solid white;
    width: pxToRem(13px);
    height: pxToRem(13px);
    border-radius: 100%;
    animation: button-scroll 1.2s infinite linear;
  }
  @include respond-to('md') {
    display: none;
  }
  @include respond-to('lg') {
    display: block;
  }
}
